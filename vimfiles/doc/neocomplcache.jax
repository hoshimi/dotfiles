*neocomplcache.txt*	究極の自動補完環境

Version: 6.1
Author : Shougo <Shougo.Matsu@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS						*neocomplcache-contents*

Introduction		|neocomplcache-introduction|
Install			|neocomplcache-install|
Interface		|neocomplcache-interface|
  Commands		  |neocomplcache-commands|
  Variables		  |neocomplcache-variables|
  Key mappings		  |neocomplcache-key-mappings|
Examples		|neocomplcache-examples|
Plugins			|neocomplcache-plugins|
  User plugins		  |neocomplcache-user-plugins|
Snippet			|neocomplcache-snippet|
Create plugin		|neocomplcache-create-plugin|
Unite sources		|neocomplcache-unite-sources|
Changelog		|neocomplcache-changelog|

==============================================================================
INTRODUCTION						*neocomplcache-introduction*

*neocomplcache* はバッファ中のキーワードをキャッシュすることで、キーワード補
完を行う。 Vim組み込みのキーワード補完とは違い、自前で実装しているため、柔軟
なカスタマイズが可能である。 ただし他のプラグインよりメモリを大量に消費する。

							*neocomplcache-version5*

neocomplcache Ver.5では、かなりの変数名が変更されているため、後方互換性がなくな
っている。移行の際には、thinca氏の作成した次のスクリプトを利用すると良いだろう。
http://gist.github.com/422503

neocomplcacheの導入については、yuitowest氏の作成したこの記事を参考にすると良い
だろう。
http://d.hatena.ne.jp/yuitowest/20100907/1283865197
この記事はVer.5.1対応だが、Ver.5.2でもインストール方法はそれほど変わらない。

==============================================================================
INSTALL							*neocomplcache-install*

1: 配布ファイルを解凍し、Vimスクリプトのディレクトリへインストールする
   (普通は ~/.vim/ またはWindowsの場合、 $HOME/vimfiles)
2: neocomplcacheはデフォルトで無効化されている。有効にするためには、
|:NeoComplCacheEnable|コマンドを実行するか、
let g:neocomplcache_enable_at_startup = 1 を.vimrc内に記述する。

							*neocomplcache-asyncronous*
neocomplcache Ver.6.0より、|vimproc|をインストールすれば、非同期にキャッシュ
を行えるように変更された。|vimproc|がインストールされていない場合、従来通り
の挙動を示す。
vimprocの配布先は次の通りである。

http://github.com/Shougo/vimshell/tree/master

vimprocを使用するためには、バイナリをコンパイルしなければならない。
コンパイル方法については、vimprocのヘルプを参照せよ。

==============================================================================
INTERFACE						*neocomplcache-interface*

------------------------------------------------------------------------------
COMMANDS 						*neocomplcache-commands*

:NeoComplCacheEnable					*:NeoComplCacheEnable*
		neocomplcacheを有効にし、初期化を行う。 これを実行すると、今
		までのキャッシュが消えてしまうので注意。

:NeoComplCacheDisable					*:NeoComplCacheDisable*
		neocomplcacheを無効にし、後始末を行う。

:NeoComplCacheToggle					*:NeoComplCacheToggle*
		neocomplcacheのロック状態を切り替える。
		ロックしている間は自動補完ができなくなる。

:Neco [{anim-number}] 					*:Neco*
		？？？

:NeoComplCacheLock 					*:NeoComplCacheLock*
		自動補完にロックをかけ、自動補完しないようにする。 自動補完
		をロックしていたとしても、手動補完は使用できる。 自動補完を
		一時的に無効にしたい場合に有効。 ロック状態はバッファローカ
		ルである。

:NeoComplCacheUnlock					*:NeoComplCacheUnlock*
		自動補完にかけたロックを解除する。

:NeoComplCacheLockPlugin {plugin-name}			*:NeoComplCacheLockPlugin*
		{plugin-name}で指定されたプラグインの補完を無効にする。無効化状
		態はバッファローカルである。

:NeoComplCacheUnlockPlugin {plugin-name}		*:NeoComplCacheUnlockPlugin*
		{plugin-name}にかけたロックを解除する。

:NeoComplCacheAutoCompletionLength			*:NeoComplCacheAutoCompletionLength*
		自動補完する文字数を一時的に変更する。
		この状態はバッファローカルであり、他の設定より優先される。

:NeoComplCacheCachingBuffer [bufname]			*:NeoComplCacheCachingBuffer*
		[bufname]で示されるバッファを完全にキャッシュする。 大きなバッ
		ファに対しては、かなり時間がかかるので注意。 [bufname]を省略
		すると、カレントバッファを指定したことになる。 [bufname]のバッ
		ファがまだキャッシュされていない場合、簡易キャッシュのみを行
		う。

:NeoComplCacheCachingDictionary [filetype]		*:NeoComplCacheCachingDictionary*
		[filetype]で示されるディクショナリを再キャッシュする。
		[filetype]を省略すると、カレントバッファのファイルタイプを指
		定したことになる。

:NeoComplCacheCachingSyntax [filetype]			*:NeoComplCacheCachingSyntax*
		[filetype]のシンタックスをもう一度キャッシュする。
		[filetype]を省略すると、カレントバッファのファイルタイプを指
		定したことになる。

:NeoComplCacheCachingTags [bufname]			*:NeoComplCacheCachingTags*
		[bufname]のタグをキャッシュする。 [bufname]を省略すると、カ
		レントバッファのファイルタイプを指定したことになる。 これを
		実行しなければ、tags_completeは動作しない。

:NeoComplCacheCachingInclude [bufname]			*:NeoComplCacheCachingInclude*
		[bufname]のインクルードファイルを再キャッシュする。 [bufname]を
		省略すると、カレントバッファのファイルタイプを指定したことにな
		る。

:NeoComplCacheCachingSnippets [filetype]		*:NeoComplCacheCachingSnippets*
		[filetype]のスニペットファイルを再キャッシュする。 [filetype]を
		省略すると、カレントバッファのファイルタイプを指定したことにな
		る。

:NeoComplCacheDisableCaching [bufname]			*:NeoComplCacheDisableCaching*
		[bufname]で示されるバッファをキャッシュしないようにする。 バッ
		ファのキャッシュは削除されるので注意。 [bufname]を省略すると、
		カレントバッファを指定したことになる。

:NeoComplCacheEnableCaching [bufname]			*:NeoComplCacheEnableCaching*
		[bufname]で示されるバッファをキャッシュできるようにする。
		[bufname]を省略すると、カレントバッファを指定したことになる。

:NeoComplCachePrintSource [bufname]			*:NeoComplCachePrintSource*
		[bufname]で示されるバッファのキャッシュ情報をカレントバッファ
		に書き出す。 [bufname]を省略すると、カレントバッファを指定し
		たことになる。 主にデバッグ用の機能のため、ユーザーが使うこ
		とはないだろう。

:NeoComplCacheOutputKeyword [bufname]			*:NeoComplCacheOutputKeyword*
		[bufname]で示されるバッファのキャッシュしたキーワードをカレ
		ントバッファに書き出す。 [bufname]を省略すると、カレントバッ
		ファを指定したことになる。 辞書ファイルを自分で作成するとき
		に便利かもしれない。

:NeoComplCacheCreateTags [bufname]			*:NeoComplCacheCreateTags*
		[bufname]で示されるバッファから、タグ情報を生成する。
		[bufname]を省略すると、カレントバッファを指定したことになる。

:NeoComplCacheEditSnippets [filetype]			*:NeoComplCacheEditSnippets*
		[filetype]のスニペット補完ファイルを編集する。 [filetype]を
		省略すると、カレントバッファのファイルタイプを編集する。
		[filetype]のスニペット補完ファイルが存在しない場合、新しく生
		成される。 このコマンドでは、|g:neocomplcache_snippets_dir|に
		あるスニペット補完ファイルを優先的に編集する。 スニペット補
		完ファイルを保存すると、自動的に再キャッシュされる。

:NeoComplCacheEditRuntimeSnippets [filetype]		*:NeoComplCacheEditRuntimeSnippets*
		[filetype]のスニペット補完ファイルを編集する。 [filetype]を
		省略すると、カレントバッファのファイルタイプを編集する。
		[filetype]のスニペット補完ファイルが存在しない場合、新しく生
		成される。 このコマンドでは、neocomplcacheに付属するスニペッ
		ト補完ファイルを編集する。 スニペット補完ファイルを保存する
		と、自動的に再キャッシュされる。

------------------------------------------------------------------------------
VARIABLES 						*neocomplcache-variables*

g:neocomplcache_enable_at_startup			*g:neocomplcache_enable_at_startup*
		Vim起動時にneocomplcacheを有効にするかどうか制御する。 1なら
		ば自動で有効化する。このオプションは.vimrcで設定するべきであ
		る。neocomplcacheは|AutoComplPop|と競合するので、同時に使用
		するべきではない。
		
		初期値は0なので、手動で有効にしない限りneocomplcacheは使用で
		きない。

g:neocomplcache_max_list				*g:neocomplcache_max_list*
		ポップアップメニューで表示される候補の数を制御する。 候補が
		これを超えた場合は切り詰められる。
		
		初期値は100である。

g:neocomplcache_max_keyword_width			*g:neocomplcache_max_keyword_width*
		ポップアップメニューで表示される候補の表示幅を制御する。 こ
		れを超えた場合は適当に切り詰められる。
		
		初期値は50である。

g:neocomplcache_max_filename_width			*g:neocomplcache_max_filename_width*
		ポップアップメニューで表示されるファイル名の表示幅を制御する。
		これを超えた場合は切り詰められる。
		
		初期値は15である。

g:neocomplcache_auto_completion_start_length		*g:neocomplcache_auto_completion_start_length*
		キー入力時にキーワード補完を行う入力数を制御する。
		
		初期値は2である。

g:neocomplcache_manual_completion_start_length		*g:neocomplcache_manual_completion_start_length*
		手動補完時に補完を行う入力数を制御する。 この値を減らすと便
		利だが、ポップアップ表示時 <C-h> や <BS> などで文字を削除し
		たときに重くなる可能性がある。
		
		初期値は2である。

g:neocomplcache_min_keyword_length			*g:neocomplcache_min_keyword_length*
		バッファや辞書ファイル中で、補完の対象となるキーワードの最小長さを制御する。
		
		初期値は4である。

g:neocomplcache_min_syntax_length			*g:neocomplcache_min_syntax_length*
		シンタックスファイル中で、補完の対象となるキーワードの最小長さを制御する。
		
		初期値は4である。

g:neocomplcache_enable_ignore_case			*g:neocomplcache_enable_ignore_case*
		補完候補を探すときに、大文字・小文字を無視するかを制御する。
		1ならば無視する。
		
		初期値は'ignorecase'である。

g:neocomplcache_enable_smart_case			*g:neocomplcache_enable_smart_case*
		入力に大文字が含まれている場合は、大文字・小文字を無視しない
		ようにする。 1ならば有効。
		
		初期値は0である。

g:neocomplcache_disable_auto_complete			*g:neocomplcache_disable_auto_complete*
		自動補完を無効にするかどうかを制御する。 1ならば自動補完が無
		効になるが、 <C-x><C-u> による手動補完は使用できる。
		
		初期値は0なので、自動補完が有効になっている。

g:neocomplcache_enable_wildcard				*g:neocomplcache_enable_wildcard*
		省入力のために、ワイルドカード文字 '*' を容認するかどうかを
		制御する。 1ならばワイルドカードが使用できる。
		
		初期値は1なので、ワイルドカードが有効になっている。

g:neocomplcache_enable_quick_match			*g:neocomplcache_enable_quick_match*
		省入力のために、-を入力すると候補の横に表示される英数字で候
		補を選択できるようにするかを制御する。 1ならば有効になる。
		
		初期値は0なので、無効になっている。

g:neocomplcache_enable_cursor_hold_i			*g:neocomplcache_enable_cursor_hold_i*
		候補の計算を|CursorHoldI|イベント時に行うかどうかを制御する。
		このオプションが設定されなかった場合、|CursorMovedI|イベン
		トを使用する。このオプションでは無理矢理タイマーイベントを模
		倣するので、Vimの仕様により候補が出てこないことがある。
		
		副作用があるので、初期値は0である。

g:neocomplcache_enable_auto_select			*g:neocomplcache_enable_auto_select*
		補完候補を出すときに、自動的に一番上の候補を選択するかどうか
		を制御する。 このオプションを有効化すると、|AutoComplPop|と
		似た補完動作となる。
		
		初期値は0である。

g:neocomplcache_enable_auto_delimiter			*g:neocomplcache_enable_auto_delimiter*
		neocomplcacheが補完時に自動でデリミタを補完するかどうかを制御す
		る。デリミタとは、ファイル名補完での /やVim scriptでの#である。
		
		初期値は0である。

g:neocomplcache_cursor_hold_i_time			*g:neocomplcache_cursor_hold_i_time*
		|g:neocomplcache_enable_cursor_hold_i|が有効になっている場合、
		自動補完を開始するための計算時間を定義する。このオプションは
		'updatetime'の値を書き換える。
		
		初期値は300である。

g:neocomplcache_enable_camel_case_completion		*g:neocomplcache_enable_camel_case_completion*
		大文字を入力したときに、それを単語の区切りとしてあいまい検索
		を行うかどうか制御する。 例えば "AE" と入力したとき、
		"ArgumentsException" とマッチするようになる。 1ならば有効にな
		る。
		
		副作用があるので、初期値は0となっている。

g:neocomplcache_enable_underbar_completion		*g:neocomplcache_enable_underbar_completion*
		_を入力したときに、それを単語の区切りとしてあいまい検索を行うか
		どうか制御する。 例えば "p_h" と入力したとき、"p*_h"と解釈され
		"public_html"とマッチするようになる。 1ならば有効になる。
		
		副作用があるので、初期値は0となっている。

g:neocomplcache_enable_caching_message			*g:neocomplcache_enable_caching_message*
		キャッシュ中に、メッセージをCommand-lineに表示するかを制御
		する。
		
		初期値は1である。

g:neocomplcache_caching_limit_file_size			*g:neocomplcache_caching_limit_file_size*
		ファイルをキャッシュするファイルサイズを設定する。 開いたファ
		イルがこのサイズより大きいと自動キャッシュしない。
		
		初期値は500000となっている。

g:neocomplcache_disable_caching_file_path_pattern	*g:neocomplcache_disable_caching_file_path_pattern*
		キャッシュを保存しないバッファのファイルパスのパターンを正規表
		現で設定する。空文字列だと無視される。
		
		初期値は空となっている。

g:neocomplcache_lock_buffer_name_pattern		*g:neocomplcache_lock_buffer_name_pattern*
		neocomplcacheの自動補完を無効化するバッファ名のパターンを正規表
		現で設定する。空文字列だと無視される。
		
		初期値は空となっている。

g:neocomplcache_force_caching_buffer_name_pattern	*g:neocomplcache_force_caching_buffer_name_pattern*
		neocomplcacheが'readonly'や'nomodifiable'を無視して強制的にキャ
		ッシュするバッファ名のパターンを正規表現で設定する。空文字列だ
		と無視される。
		
		初期値は空となっている。

g:neocomplcache_disable_auto_select_buffer_name_pattern	*g:neocomplcache_disable_auto_select_buffer_name_pattern*
		|g:neocomplcache_enable_auto_select|による候補の自動選択を無効
		化するバッファ名のパターンを正規表現で設定する。空文字列だと無
		視される。
		
		初期値は空となっている。

g:neocomplcache_snippets_dir				*g:neocomplcache_snippets_dir*
		ユーザが定義したスニペット補完ファイルのパスを指定する。 カ
		ンマ区切りで複数のディレクトリを設定可能。 ここで指定したディ
		レクトリが実際に存在しない場合、無視される。 ユーザ定義のス
		ニペット補完ファイルは標準のスニペット補完ファイルを読み込ん
		だ後に読み込まれる。 重複したスニペットは上書きされる。
		
		この変数はユーザが自分で定義しない限り存在しない。

g:neocomplcache_temporary_dir				*g:neocomplcache_temporary_dir*
		neocomplcacheが一時ファイルを書き出すディレクトリを指定する。
		ここで指定したディレクトリが実際に存在しない場合、作成される。
		例えばkeyword_complete.vimはキーワードのキャッシュをこの下の
		'keyword_cache'ディレクトリに保存する。
		
		初期値は'~/.neocon'である。

g:neocomplcache_keyword_patterns			*g:neocomplcache_keyword_patterns*
		補完するためのキーワードパターンを記録する。 これはファイル
		タイプ毎に正規表現で指定されている。
		
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。
>
		" Examples:
		if !exists('g:neocomplcache_keyword_patterns')
		  let g:neocomplcache_keyword_patterns = {}
		endif
		let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
<
g:neocomplcache_next_keyword_patterns			*g:neocomplcache_next_keyword_patterns*
		カーソルより後のキーワードパターンを認識するための正規表現を記録する。
		|g:neocomplcache_keyword_patterns|と形式は同じである。
		
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_omni_patterns				*g:neocomplcache_omni_patterns*
		オムニ補完するためのキーワードパターンを記録する。これはファ
		イルタイプ毎に正規表現で指定されている。これが定義されていない場合、
		自動補完ではオムニ補完がよばれない。RubyやPHPのオムニ補完は重い
		ので、パターンは無効化されている。
		
		
		初期値は複雑なので、autoload/neocomplcache/sources/omni_complete.vimの
		s:source.initialize()を参照せよ。
>
		" Examples:
		if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplcache_omni_patterns = {}
		endif
		let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
		let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
		let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
		let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
<
g:neocomplcache_tags_filter_patterns			*g:neocomplcache_tags_filter_patterns*
		タグ補完時の候補をフィルタするパターンを記録する。
		例えば、C/C++のファイルタイプ時に_で始まる候補を除外することができる。
		
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_same_filetype_lists			*g:neocomplcache_same_filetype_lists*
		ファイルタイプを相互に関連づけるためのディクショナリ。 cと
		cppを相互参照させるときなどに有効である。
		
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_dictionary_filetype_lists		*g:neocomplcache_dictionary_filetype_lists*
		ファイルタイプに辞書ファイルを関連づけるためのディクショナリ。
		キーにファイルタイプ、値に辞書ファイルへのパスを指定する。
		','区切りで複数の辞書を指定できる。もしこの変数が空の場合、
		neocomplcacheは'dictionary'を代わりに使用する。
		キーに"text"を指定すると、text mode時の辞書を指定することとなる。
		
		初期値は空である。

g:neocomplcache_dictionary_patterns			*g:neocomplcache_dictionary_patterns*
		辞書ファイルのキーワードパターンを指定するためのディクショナ
		リ。キーにファイルタイプ、値にキーワードもしこの変数が空の場
		合、neocomplcacheは|g:neocomplcache_keyword_patterns|を代わ
		りに使用する。

		初期値は空である。

g:neocomplcache_filetype_include_lists			*g:neocomplcache_filetype_include_lists*
		ファイルタイプに内包される別のファイルタイプを定義する。
		中身はディクショナリのリストであり、次の内容を持つ。
		"filetype" : 内包されるファイルタイプ名
		"start" : ファイルタイプが初まるパターン
		"end" : ファイルタイプが終わるパターン。startのマッチパター
			ンを参照するために、\1を使うことができる。
>
		" Examples:
		if !exists('g:neocomplcache_filetype_include_lists')
		let g:neocomplcache_filetype_include_lists= {}
		endif
		let g:neocomplcache_filetype_include_lists.perl6 = [{'filetype' : 'pir', 'start' : 'Q:PIR\s*{', 'end' : '}'}]
		let g:neocomplcache_filetype_include_lists.vim = 
		\[{'filetype' : 'python', 'start' : '^\s*python <<\s*\(\h\w*\)', 'end' : '^\1'}]
<
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_text_mode_filetypes			*g:neocomplcache_text_mode_filetypes*
		自動的にテキストモードとなるファイルタイプをキーとした
		ディクショナリである。neocomplcacheがテキストモードのとき、
		英語を書き易くするための支援機能が有効となる。
		
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_disable_select_mode_mappings		*g:neocomplcache_disable_select_mode_mappings*
		snippets_completeが行うSelect modeのKey-mappingsを無効にする
		かどうかを制御する。 通常は有効にしておいた方がよい。
		
		初期値は1である。

g:neocomplcache_ctags_program				*g:neocomplcache_ctags_program*
		include_completeなどがタグ生成に使用するctagsコマンドへのパスを指定する。
		この実行ファイルが存在しない場合、include_completeはキャッシュ
		を生成しない。
		
		初期値は"ctags"である。

g:neocomplcache_ctags_arguments_list			*g:neocomplcache_ctags_arguments_list*
		include_completeなどがctagsコマンドを使用する際に、コマンドの
		引数として与える値を設定するための、ファイルタイプをキーと
		した文字列の辞書である。
		
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_include_paths				*g:neocomplcache_include_paths*
		インクルードファイルのpathをファイルタイプごとに列挙する変数
		である。存在しない場合、&l:pathが使われる。 記述形式は'path'
		を参照せよ。ファイルタイプをキーとした文字列の辞書である。
		
		初期値は複雑なので、autoload/neocomplcache/sources/include_complete.vimの
		neocomplcache#sources#include_complete#initialize()を参照せよ。

g:neocomplcache_include_exprs				*g:neocomplcache_include_exprs*
		インクルードファイル名を取得するために行う行解析の式である。
		存在しない場合、&l:includeexprが使われる。 記述形式は
		'includeexpr'を参照せよ。ファイルタイプをキーとした文字列の
		辞書である。
		
		初期値は複雑なので、autoload/neocomplcache/sources/include_complete.vimの
		s:source.initialize()を参照せよ。

g:neocomplcache_include_patterns			*g:neocomplcache_include_patterns*
		インクルード命令のパターンを指定する。存在しない場合、
		&l:includeが使われる。 記述形式は'include'を参照せよ。ファイ
		ルタイプをキーとした文字列の辞書である。
		
		初期値は複雑なので、autoload/neocomplcache/sources/include_complete.vimの
		s:source.initialize()を参照せよ。

g:neocomplcache_include_max_processes			*g:neocomplcache_include_max_processes*
		インクルード補完が非同期に生成するプロセス数の上限を設定する。
		この値を0にすると非同期にプロセスを生成することはない。

		初期値は20である。

g:neocomplcache_member_prefix_patterns			*g:neocomplcache_member_prefix_patterns*
		include_completeやtags_complete,
		buffer_completeがメンバを認識するための
		パターンを記録する。これはファイルタイプ毎に正規表現で指定
		されている。
		
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_delimiter_patterns			*g:neocomplcache_delimiter_patterns*
		関数をスマートに補完するための区切り文字パターンを定義する。
		これはファイルタイプ毎に正規表現のリストで指定されている。
>
		" Examples:
		if !exists('g:neocomplcache_delimiter_patterns')
		let g:neocomplcache_delimiter_patterns= {}
		endif
		let g:neocomplcache_delimiter_patterns.vim = ['#']
		let g:neocomplcache_delimiter_patterns.cpp = ['::']
<
		初期値は複雑なので、autoload/neocomplcache.vimのneocomplcache#enable()を参照せよ。

g:neocomplcache_quick_match_patterns			*g:neocomplcache_quick_match_patterns*
		クイックマッチリストを表示する入力パターンを記録する。 これ
		はファイルタイプ毎に入力文字列の末尾にマッチする正規表現で指
		定されている。 defaultを指定すると、通常時の入力パターンを設
		定できる。
		パターンを空文字列にすると、クイックマッチリストが毎回表示され
		る。
		
		初期値は { 'default' : '-' } である。

g:neocomplcache_quick_match_table			*g:neocomplcache_quick_match_table*
		入力文字と対応する、クイックマッチリストの補完候補のテーブルである。
		
		初期値は複雑なので、plugin/neocomplcache.vimを参照せよ。

g:neocomplcache_omni_functions				*g:neocomplcache_omni_functions*
		|&filetype|をキーとしたディクショナリであり、|omni_complete|
		が呼び出すオムニ補完関数を定義する。 |&filetype|に対応する関
		数が定義されていないとき、|omni_complete|は|omnifunc|を呼び
		出す。
		
		初期値は空である。

g:neocomplcache_vim_completefuncs			*g:neocomplcache_vim_completefuncs*
		コマンド名をキーとして、補完関数名を値としたディクショナリ変
		数である。 |vim_complete|において、
		|command-completion-custom|や|command-completion-customlist|
		のコマンド引数を補完するために使用される。
>
		" Examples:
		if !exists('g:neocomplcache_vim_completefuncs')
		  let g:neocomplcache_vim_completefuncs = {}
		endif
		let g:neocomplcache_vim_completefuncs.Ref = 'ref#complete'
<
		
		初期値は空である。

g:neocomplcache_plugin_disable				*g:neocomplcache_plugin_disable*
		プラグインを無効にするかどうかを指定するディクショナリ。プラ
		グイン名をキーにして、値を1にすることで無効になる。
		
		初期値は空である。

g:neocomplcache_plugin_completion_length		*g:neocomplcache_plugin_completion_length*
		プラグインを呼び出す文字数をプラグインごとに指定するディクショ
		ナリ。 重いプラグインは文字数が多いときにのみ呼び出せるよう
		にするなどが考えられる。
		
		初期値は空である。

g:neocomplcache_plugin_rank				*g:neocomplcache_plugin_rank*
		プラグインの優先度を指定するディクショナリ。
		
		初期値はそれぞれのプラグインによってセットされる。

g:neocomplcache_force_overwrite_completefunc		*g:neocomplcache_force_overwrite_completefunc*
		neocomplcacheが強制的に'completefunc'を上書きするかどうかを
		設定する。プラグインがcompletefuncを使用していて、
		neocomplcacheが無効になってしまう場合にセットするとよい。た
		だし、プラグインの'completefunc'は使用できなくなる。
		
		副作用があるので、初期値は0である。

g:neocomplcache_snippets_disable_runtime_snippets
							*g:neocomplcache_snippets_disable_runtime_snippets*
		この変数を真にすると、neocomplcache runtimeのスニペットは読
		み込まれない。用意されているスニペットとの干渉を避けるために
		用いる。neocomplcacheが初期化される前にセットしないと意味は
		ない。

		初期値は0である。

------------------------------------------------------------------------------
KEY MAPPINGS 						*neocomplcache-key-mappings*

<Plug>(neocomplcache_snippets_expand)			*<Plug>(neocomplcache_snippets_expand)*
		カーソル位置にあるスニペットを展開する。スニペットが存在しな
		いとき、次のプレースホルダにジャンプする。スニペットは
		neocomplcacheのキーワードパターンで示されるもののみを認識す
		る。
		デフォルトではマッピングされていない。
		
		Note: カーソル位置にあるスニペットはキーワードパターンにマッチしないと展開されない。
		例えば、"."というスニペットはキーワードパターンにマッチしないので展開されない。
		もしこのスニペットを展開したい場合、
		|<Plug>(neocomplcache_snippets_force_expand)|を使用しなけれ
		ばならない。


<Plug>(neocomplcache_snippets_jump)			*<Plug>(neocomplcache_snippets_jump)*
		次のプレースホルダにジャンプする。プレースホルダが存在しない
		とき、カーソル位置にあるスニペットを展開する。
		デフォルトではマッピングされていない。

<Plug>(neocomplcache_snippets_force_expand)		*<Plug>(neocomplcache_snippets_force_expand)*
		カーソル位置にあるスニペットを展開する。スニペットが存在しな
		いときは無視される。
		デフォルトではマッピングされていない。

<Plug>(neocomplcache_snippets_force_jump)		*<Plug>(neocomplcache_snippets_force_jump)*
		次のプレースホルダにジャンプする。スニペットの展開は行わない。
		スニペット名を展開したくないときに使う。
		デフォルトではマッピングされていない。

neocomplcache#manual_filename_complete()		*neocomplcache#manual_filename_complete()*
		inoremap <expr>上で使用する。neocomplcacheのファイル名補完を
		手動で呼び出す。 Vim標準のファイル名補完を置き換えるときに使
		う。
>
		inoremap <expr><C-x><C-f>  neocomplcache#manual_filename_complete()
<
neocomplcache#manual_omni_complete()			*neocomplcache#manual_omni_complete()*
		inoremap <expr>上で使用する。neocomplcacheのオムニ補完を手動
		で呼び出す。 Vim標準のオムニ補完を置き換えるときに使う。
>
		inoremap <expr><C-j>  neocomplcache#manual_filename_complete()
<
neocomplcache#manual_keyword_complete()			*neocomplcache#manual_keyword_complete()*
		inoremap <expr>上で使用する。neocomplcacheのキーワード補完を
		手動で呼び出す。 Vim標準のキーワード補完を置き換えるときに使
		う。
>
		inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : neocomplcache#manual_keyword_complete()
<
neocomplcache#close_popup()				*neocomplcache#close_popup()*
		neocomplcacheの補完を選択し、ポップアップメニューを閉じる。
		<C-y>の代わりに 使うと良いだろう。
>
		inoremap <expr><C-y>  neocomplcache#close_popup()
<
neocomplcache#cancel_popup()				*neocomplcache#cancel_popup()*
		neocomplcacheの補完をキャンセルし、ポップアップメニューを閉
		じる。<C-e>の代わりに 使うと良いだろう。
>
		inoremap <expr><C-e>  neocomplcache#cancel_popup()
<
neocomplcache#smart_close_popup()			*neocomplcache#smart_close_popup()*
		neocomplcacheの補完を選択し、ポップアップメニューを閉じる。
		|neocomplcache#close_popup()|とは違い、
		|g:neocomplcache_enable_auto_select|によって挙動を賢く変化させる。

neocomplcache#undo_completion()				*neocomplcache#undo_completion()*
		inoremap <expr>上で使用する。neocomplcacheによって補完した候
		補を元に戻す。 Vimには確定した補完をキャンセルする機構がない
		ため、活用すると便利であろう。
>
		inoremap <expr><C-g>     neocomplcache#undo_completion()
<
neocomplcache#complete_common_string()			*neocomplcache#complete_common_string()*
		inoremap <expr>上で使用する。補完候補の共通文字列を補完する。
		共通文字列が長い場合に便利である。
>
		inoremap <expr><C-l>     neocomplcache#complete_common_string()
<
neocomplcache#sources#snippets_complete#expandable()	*neocomplcache#sources#snippets_complete#expandable()*
		inoremap <expr>上で使用する。カーソル前の文字列がスニペット
		のトリガーかどうか、もしくはプレースホルダーが存在するかどう
		かを調べる。スニペットの展開にキーマッピングを取られたくない
		場合に便利である。
		戻り値：
		0 : 見つからない
		1 : カーソル位置にスニペットのトリガーがある
		2 : カレントバッファにスニペットのプレースホルダーを発見した
		3 : どちらも発見した
>
		imap <expr><C-l>    neocomplcache#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : "\<C-n>"
<
<Plug>(neocomplcache_start_unite_complete)		*<Plug>(neocomplcache_start_unite_complete)*
		|unite|による補完インタフェースを使用する。この機能はまだ実
		験段階である。手動補完を置き換えることができると思われるが、
		デフォルトではマッピングされていない。

<Plug>(neocomplcache_start_unite_snippet)		*<Plug>(neocomplcache_start_unite_snippet)*
		|unite|による補完インタフェースを使用して、スニペットのリス
		トを参照する。この機能はまだ実験段階である。

==============================================================================
EXAMPLES						*neocomplcache-examples*

doc/neocomplcache.txt(英語ヘルプ)の|neocomplcache-examples|を参照せよ。
これは作者が普段使っている設定を基にしている。

==============================================================================
PLUGINS							*neocomplcache-plugins*

この項では、neocomplcacheに添付されているプラグインの解説を行う。 自分で作成
したプラグインは、autoload/neocomplcache/sourcesに保存することで、
neocomplcacheにより自動的に読み込まれる。

keyword_complete.vim					*keyword_complete*
		バッファやディクショナリからキーワードを収集し、補完に利用す
		るプラグイン。 neocomplcacheの基本機能も提供しているため、こ
		のプラグインを削除すると neocomplcacheは正常に動作しない。

snippets_complete.vim					*snippets_complete*
		スニペット補完ファイルからスニペットを読み込み、補完に利用す
		るプラグイン。 snipMate.vimやsnippetsEmu.vimと似たような機能
		を提供する。 neocomplcacheの機能を使い、スニペットを検索でき
		るため、 スニペットを覚える手間が省けるだろう。 スニペットの
		定義はsnipMate.vimと似ているため、 自分でスニペットを定義し
		たり改造するのも簡単である。

tags_complete.vim					*tags_complete*
		'tags'で定義されているタグファイルを読み込み、補完候補に加え
		るプラグイン。 大きなタグを読み込ませると重いため、巨大なタ
		グファイルが設定されているとき、 |:NeoComplCacheCachingTags|
		を実行しなければキャッシュしない。 現在は、より便利なインク
		ルード補完を使用するべきである。

syntax_complete.vim					*syntax_complete*
		標準で提供されているautoload/syntaxcomplete.vimのように、シン
		タックスファイルを解析し、補完候補に加えるプラグイン。
		autoload/syntaxcomplete.vimよりもたくさんの候補を認識できる。

include_complete.vim					*include_complete*
		開いているバッファを解析し、参照しているファイルを自動的に候補
		に加えるプラグイン。 いちいちタグファイルや辞書ファイルを用意し
		なくて良いので便利である。 ただし、'path'や'include',
		'includeexpr'が適切に設定されている必要がある。
		vimprocがインストールされていると非同期にキャッシュを行うが、そ
		うでない場合、キャッシュには時間がかかるため、
		|:NeoComplCacheCachingInclude|を実行しないとキャッシュしない。
                
vim_complete.vim					*vim_complete*
		文脈を解析し、VimScriptのオムニ補完を行う。
		VimScriptの編集時以外では動作しない。 neocomplcacheからは
		|i_CTRL-X_CTRL-V|が呼び出せないため作られた。 現在、
		ローカル変数やスクリプト変数、関数やコマンドの解析が実装され
		ている。

dictionary_complete.vim					*dictionary_complete*
		'dictionary'または|g:neocomplcache_dictionary_filetype_lists|
		から候補を収集し、補完候補に加えるプラグインである。

filename_complete.vim					*filename_complete*
		このプラグインはファイル名を補完候補に加える。ヘッダーファイル
		の補完などで便利であろう。このプラグインはinclude_completeと
		同様に、インクルードパスやインクルードパターンを適切に判断す
		る。

omni_complete.vim					*omni_complete*
		このプラグインはカーソルが|g:neocomplcache_omni_patterns|にマッ
		チする場合、'omnifunc'を自動的に呼び出す。
		|g:neocomplcache_omni_function_list|が定義されている場合、そち
		らが優先される。

completefunc_complete.vim				*completefunc_complete*
		任意の補完関数から補完候補を収集するためのプラグインだが、未完
		成である。 現在、補完関数を手動で呼び出すための
		neocomplcache#sources#completefunc_complete#call_completefunc(funcname)
		のみが使用できる。

abbrev_complete.vim					*abbrev_complete*
		abbrevから補完候補を収集するプラグインである。Vimではabbrevがあ
		まり使われないため、ほとんど使用することはないと思われる。

------------------------------------------------------------------------------
USER PLUGINS 						*neocomplcache-user-plugins*

ここではneocomplcacheに添付されていない、非標準のプラグインを紹介する。

neco-ghc						*neocomplcache-plugins-neco-ghc*
		https://github.com/ujihisa/neco-ghc
		eagletmt氏が作成し、ujihisa氏がメンテナンスをしている。
		Haskellのソースファイルを補完できるが、動作には
		ghc-mod <http://www.mew.org/~kazu/proj/ghc-mod/>が必要である。

neco-ruby						*neocomplcache-plugins-neco-ruby*
		https://github.com/ujihisa/neco-ruby
		Ruby用の補完プラグインである。作者はujihisa氏。現在、require_relative
		の補完ができる。

==============================================================================
SNIPPET							*neocomplcache-snippet-completion*

neocomplcacheではスニペット機能を内蔵している。 スニペットはsnipMate.vim風
に記述できるので、簡単に移植できるだろう。
>
	snippet     if
	abbr        if endif
	prev_word   '^'
	    if ${1:condition}
	        ${2}
	    endif
<
例えば上記のようなファイルを
'autoload/neocomplcache/snippet_complete/vim.snip' として保存すると、vimファ
イルタイプを開いたときに自動的に読み込まれる。 #を行頭に書くとコメントで、
空行は無視される。 snippet の後には補完するために入力する文字列、先頭に空
白文字があると 補完されるキーワード、abbrはポップアップメニューに表示される
略語（省略可）、prev_wordは優先して補完する文脈を,で区切っ て''で囲んで指定
する（省略可）。ちなみに'^'は文の先頭とい う意味になる。 スニペットファ
イルのシンタックスファイルを作成したので、それぞれの要素が色分けされる。
詳しくは autoload/neocomplcache/snippet_completeにあるスニペット補完ファイ
ルを参照せよ。 最近のsnipMateではシンタックスファイルが付属しているが、
neocomplcacheが使用しているものの方が高機能なので、そちらを利用したほうがよい。


スニペット名として使用できる単語は、|g:neocomplcache_keyword_patterns|で表され
るキーワードのパターンか、カーソル以前の非空白文字である。ただし、キーワードパ
ターンに含まれない記号を用いると、snippets_completeによる補完ができない点には注
意が必要である。ちなみに、キーワードパターンにマッチするスニペット名が優先して
展開される。カーソル前の文字列がAA-BBの場合に展開されるスニペットはAA-BBではな
く、BBである。


ちなみに、同じスニペットファイルにそのスニペット名がすでに定義されていると警告される。
スニペットを明示的に上書きしたい場合は、
>
	delete snippets_name
<
してから、snippet文でもう一度定義すると良い。
外部ファイルをインクルードした場合や、他のスニペットファイルのスニペットを上
書きしても警告は出ない。


snipMateと違って、外部スニペットのインクルードも使える。
>
	include c.snip
<
例えばこのように記述すると、そのスニペットファイルにc用のスニペットを加えて
補完候補とする。 共通部分を補完するのに便利である。 ただし再帰的処理を行っ
ているので、無限ループに陥らないように注意する必要がある。

snipMateのように、``を用いたevalも動作する。
>
	snippet     hoge
	prev_word   '^'
	    `expand("%")`
<
例えばこのように記述すると、現在開いているバッファ名を補完できる。 ただし
補完候補を展開するときに評価を行うため、副作用には十分注意しなければならない。


簡単にスニペットファイルを編集できるように、 |:NeoComplCacheEditSnippets|と
いうコマンドを用意している。 このコマンドを用いると、filetypeのスニペット
補完ファイルを簡単に編集することができる。 filetypeを省略すると、
&filetypeとなる。保存すると自動的に再キャッシュされるので、さらに便利である。


neocomplcacheは自動的にスニペット展開用のキーをマッピングすることはないため、
スニペットを展開するためには、以下のようなキーマッピングを定義しなければなら
ない。
>
	imap <C-l>    <Plug>(neocomplcache_snippets_expand)
	smap <C-l>    <Plug>(neocomplcache_snippets_expand)
<
snipMate風のプレースホルダにも対応している。
>
	snippet     if
	abbr        if endif
	prev_word   '^'
	    if ${1:condition}
	        ${2}
	    endif
<
${1}が最初に入力する単語である。スニペットの展開時に自動的に移動する。 もう
一回|<Plug>(neocomplcache_snippets_expand)|を押すと、${2}, ${3}, ...に移動
する。${1:condition}はデフォルトでconditionという単語が選択された状態になる。
スニペットの中でスニペットを補完したりといった複雑な場合も、ある程度直感的
に動作するようになっている。 プレースホルダはソースコード中でも色分けされる。


vnoremapやvmap, mapはselect modeでも有効になるので、変なマッピングをしてい
ると、デフォルト値の選択時に上手く文字が入力できなくなる。 .vimrcにその
ような記述があれば、xnoremapやxmapに修正するべきである。


ユーザが定義するスニペットの保存場所は自由に指定できる。
指定するときは、
>
	let g:neocomplcache_snippets_dir = $HOME.'/snippets'
<
のように.vimrcに記述する。
|:NeoComplCacheEditSnippets|では、|g:neocomplcache_snippets_dir|を優先して読
み込む。


展開可能かどうかを判断する関数として、
|neocomplcache#snippets_complete#expandable()|を追加した。 これを使えば、
	imap <expr><C-l>    neocomplcache#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : "\<C-n>"
のように設定でき、展開可能でない場合は他の機能にキーバインドを割り当てること
が出来る。


複数回展開が必要なスニペットは表示が変わり、[Snippet]が<Snippet>に変化する。


どのファイルタイプでも読み込まれる、'_.snip'がある。
さらに、snipMate形式のスニペットファイルもそのまま読み込める。


下のように空白もしくは, で区切って指定すると、スニペットの別名定義ができる。
スニペット名を直接入力するときに、覚えることが簡単になるので便利である。
>
	alias hoge hogera hogehoge
<

プレースホルダの同期も実装されている。 ${1}は$1のプレースホルダに同期さ
れる。 snipMateのスニペットとの互換性も高い。 即座に同期され
るsnipMateと違い、次にジャンプするときに同期されるので注意が必要。${0}は最後に展開さ
れるので、最後に入力する部分に指定すると良い。


プレースホルダの値には改行を含ませることはできない。以下のスニペットは不正である。
>
	snippet test
		${1:constructor: (${2:args\}) ->
			${3:# do smth}}
<

snipMateのmulti snippetにも対応している。
ただし、triggerとdescriptionの間のスペースは'_'に変換される。
>
	snippet trigger description1
		hoge
	snippet trigger description2
		piyo
<
<C-n>や<C-p>でスニペットを選択し、<Plug>(neocomplcache_snippets_expand)で展開す
る。

プレースホルダの中にプレースホルダを書くことができる。ただ し、'}'はエスケー
プしなればならない。 '\'がエスケープ文字になっている。
>
	snippet div
	<div ${1:id="${2:someid\}"}>${3}</div>${4}
<

ハードタブを使ってインデントすると、 indent pluginの設定を使わず
にインデントを復元する。 phpなど、indent pluginが非力な言語を使うときに便
利である。snipMateはハードタブ固定なので、互換性も上がっている。
>
	snippet if
		if (${1:/* condition */}) {
			${2:// code...}
		}
<
==============================================================================
CREATE PLUGIN					*neocomplcache-create-plugin*

この項では、neocomplcacheのプラグインを作成する方法について解説する。 プラグ
インを自作することで、neocomplcacheの能力は無限大に広がるだろう。

==============================================================================
UNITE SOURCES						*neocomplcache-unite-sources*

ここでは、neocomplcacheに添付されている、|unite|用sourceについて解説を行なう。

							*neocomplcache-unite-source-neocomplcache*
neocomplcache
		neocomplcacheの補完候補を候補とする。候補はcompletion kindで
		ある。普通、mapping内で
		|<Plug>(neocomplcache_start_unite_complete)|をマッピングして
		使用する。
		例：
>
		imap <C-k>  <Plug>(neocomplcache_start_unite_complete)
<
							*neocomplcache-unite-source-snippet*
snippet
		neocomplcacheのsnippetを候補とする。候補はsnippet kindで
		ある。普通、mapping内で
		|<Plug>(neocomplcache_start_unite_snippet)|をマッピングして
		使用するが、:Unite snippetでも呼び出すことができる。
		"edit"アクションにより、スニペットの編集を行うことができる。
		例：
>
		imap <C-s>  <Plug>(neocomplcache_start_unite_complete)
<

source別アクション

snippet							*neocomplcache-unite-action-snippet*
	expand		スニペットの展開(デフォルト)
	edit		スニペットの編集
	preview		スニペットの定義を見る

==============================================================================
CHANGELOG					*neocomplcache-changelog*

doc/neocomplcache.txtを参照せよ。

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
